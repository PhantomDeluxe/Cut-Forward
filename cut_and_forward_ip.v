
`timescale 1 ns / 1 ps

	module cut_and_forward_ip #
	(
		// Users to add parameters here

		// User parameters ends
		// Do not modify the parameters beyond this line


		// Parameters of Axi Slave Bus Interface S00_AXI
		parameter integer C_S00_AXI_DATA_WIDTH	= 32,
		parameter integer C_S00_AXI_ADDR_WIDTH	= 4,

		// Parameters of Axi Slave Bus Interface S_AXI_FULL
		parameter integer C_S_AXI_FULL_ID_WIDTH	= 1,
		parameter integer C_S_AXI_FULL_DATA_WIDTH	= 32,
		parameter integer C_S_AXI_FULL_ADDR_WIDTH	= 6,
		parameter integer C_S_AXI_FULL_AWUSER_WIDTH	= 0,
		parameter integer C_S_AXI_FULL_ARUSER_WIDTH	= 0,
		parameter integer C_S_AXI_FULL_WUSER_WIDTH	= 0,
		parameter integer C_S_AXI_FULL_RUSER_WIDTH	= 0,
		parameter integer C_S_AXI_FULL_BUSER_WIDTH	= 0,

		// Parameters of Axi Master Bus Interface M_AXI_FULL
		parameter  C_M_AXI_FULL_TARGET_SLAVE_BASE_ADDR	= 32'h40000000,
		parameter integer C_M_AXI_FULL_BURST_LEN	= 16,
		parameter integer C_M_AXI_FULL_ID_WIDTH	= 1,
		parameter integer C_M_AXI_FULL_ADDR_WIDTH	= 32,
		parameter integer C_M_AXI_FULL_DATA_WIDTH	= 32,
		parameter integer C_M_AXI_FULL_AWUSER_WIDTH	= 0,
		parameter integer C_M_AXI_FULL_ARUSER_WIDTH	= 0,
		parameter integer C_M_AXI_FULL_WUSER_WIDTH	= 0,
		parameter integer C_M_AXI_FULL_RUSER_WIDTH	= 0,
		parameter integer C_M_AXI_FULL_BUSER_WIDTH	= 0
	)
	(
		// Users to add ports here

		// User ports ends
		// Do not modify the ports beyond this line


		// Ports of Axi Slave Bus Interface S00_AXI
		input wire  s00_axi_aclk,
		input wire  s00_axi_aresetn,
		input wire [C_S00_AXI_ADDR_WIDTH-1 : 0] s00_axi_awaddr,
		input wire [2 : 0] s00_axi_awprot,
		input wire  s00_axi_awvalid,
		output wire  s00_axi_awready,
		input wire [C_S00_AXI_DATA_WIDTH-1 : 0] s00_axi_wdata,
		input wire [(C_S00_AXI_DATA_WIDTH/8)-1 : 0] s00_axi_wstrb,
		input wire  s00_axi_wvalid,
		output wire  s00_axi_wready,
		output wire [1 : 0] s00_axi_bresp,
		output wire  s00_axi_bvalid,
		input wire  s00_axi_bready,
		input wire [C_S00_AXI_ADDR_WIDTH-1 : 0] s00_axi_araddr,
		input wire [2 : 0] s00_axi_arprot,
		input wire  s00_axi_arvalid,
		output wire  s00_axi_arready,
		output wire [C_S00_AXI_DATA_WIDTH-1 : 0] s00_axi_rdata,
		output wire [1 : 0] s00_axi_rresp,
		output wire  s00_axi_rvalid,
		input wire  s00_axi_rready,

		// Ports of Axi Slave Bus Interface S_AXI_FULL
		input wire  s_axi_full_aclk,
		input wire  s_axi_full_aresetn,
		input wire [C_S_AXI_FULL_ID_WIDTH-1 : 0] s_axi_full_awid,
		input wire [C_S_AXI_FULL_ADDR_WIDTH-1 : 0] s_axi_full_awaddr,
		input wire [7 : 0] s_axi_full_awlen,
		input wire [2 : 0] s_axi_full_awsize,
		input wire [1 : 0] s_axi_full_awburst,
		input wire  s_axi_full_awlock,
		input wire [3 : 0] s_axi_full_awcache,
		input wire [2 : 0] s_axi_full_awprot,
		input wire [3 : 0] s_axi_full_awqos,
		input wire [3 : 0] s_axi_full_awregion,
		input wire [C_S_AXI_FULL_AWUSER_WIDTH-1 : 0] s_axi_full_awuser,
		input wire  s_axi_full_awvalid,
		output wire  s_axi_full_awready,
		input wire [C_S_AXI_FULL_DATA_WIDTH-1 : 0] s_axi_full_wdata,
		input wire [(C_S_AXI_FULL_DATA_WIDTH/8)-1 : 0] s_axi_full_wstrb,
		input wire  s_axi_full_wlast,
		input wire [C_S_AXI_FULL_WUSER_WIDTH-1 : 0] s_axi_full_wuser,
		input wire  s_axi_full_wvalid,
		output wire  s_axi_full_wready,
		output wire [C_S_AXI_FULL_ID_WIDTH-1 : 0] s_axi_full_bid,
		output wire [1 : 0] s_axi_full_bresp,
		output wire [C_S_AXI_FULL_BUSER_WIDTH-1 : 0] s_axi_full_buser,
		output wire  s_axi_full_bvalid,
		input wire  s_axi_full_bready,
		input wire [C_S_AXI_FULL_ID_WIDTH-1 : 0] s_axi_full_arid,
		input wire [C_S_AXI_FULL_ADDR_WIDTH-1 : 0] s_axi_full_araddr,
		input wire [7 : 0] s_axi_full_arlen,
		input wire [2 : 0] s_axi_full_arsize,
		input wire [1 : 0] s_axi_full_arburst,
		input wire  s_axi_full_arlock,
		input wire [3 : 0] s_axi_full_arcache,
		input wire [2 : 0] s_axi_full_arprot,
		input wire [3 : 0] s_axi_full_arqos,
		input wire [3 : 0] s_axi_full_arregion,
		input wire [C_S_AXI_FULL_ARUSER_WIDTH-1 : 0] s_axi_full_aruser,
		input wire  s_axi_full_arvalid,
		output wire  s_axi_full_arready,
		output wire [C_S_AXI_FULL_ID_WIDTH-1 : 0] s_axi_full_rid,
		output wire [C_S_AXI_FULL_DATA_WIDTH-1 : 0] s_axi_full_rdata,
		output wire [1 : 0] s_axi_full_rresp,
		output wire  s_axi_full_rlast,
		output wire [C_S_AXI_FULL_RUSER_WIDTH-1 : 0] s_axi_full_ruser,
		output wire  s_axi_full_rvalid,
		input wire  s_axi_full_rready,

		// Ports of Axi Master Bus Interface M_AXI_FULL
		input wire  m_axi_full_init_axi_txn,
		output wire  m_axi_full_txn_done,
		output wire  m_axi_full_error,
		input wire  m_axi_full_aclk,
		input wire  m_axi_full_aresetn,
		output wire [C_M_AXI_FULL_ID_WIDTH-1 : 0] m_axi_full_awid,
		output wire [C_M_AXI_FULL_ADDR_WIDTH-1 : 0] m_axi_full_awaddr,
		output wire [7 : 0] m_axi_full_awlen,
		output wire [2 : 0] m_axi_full_awsize,
		output wire [1 : 0] m_axi_full_awburst,
		output wire  m_axi_full_awlock,
		output wire [3 : 0] m_axi_full_awcache,
		output wire [2 : 0] m_axi_full_awprot,
		output wire [3 : 0] m_axi_full_awqos,
		output wire [C_M_AXI_FULL_AWUSER_WIDTH-1 : 0] m_axi_full_awuser,
		output wire  m_axi_full_awvalid,
		input wire  m_axi_full_awready,
		output wire [C_M_AXI_FULL_DATA_WIDTH-1 : 0] m_axi_full_wdata,
		output wire [C_M_AXI_FULL_DATA_WIDTH/8-1 : 0] m_axi_full_wstrb,
		output wire  m_axi_full_wlast,
		output wire [C_M_AXI_FULL_WUSER_WIDTH-1 : 0] m_axi_full_wuser,
		output wire  m_axi_full_wvalid,
		input wire  m_axi_full_wready,
		input wire [C_M_AXI_FULL_ID_WIDTH-1 : 0] m_axi_full_bid,
		input wire [1 : 0] m_axi_full_bresp,
		input wire [C_M_AXI_FULL_BUSER_WIDTH-1 : 0] m_axi_full_buser,
		input wire  m_axi_full_bvalid,
		output wire  m_axi_full_bready,
		output wire [C_M_AXI_FULL_ID_WIDTH-1 : 0] m_axi_full_arid,
		output wire [C_M_AXI_FULL_ADDR_WIDTH-1 : 0] m_axi_full_araddr,
		output wire [7 : 0] m_axi_full_arlen,
		output wire [2 : 0] m_axi_full_arsize,
		output wire [1 : 0] m_axi_full_arburst,
		output wire  m_axi_full_arlock,
		output wire [3 : 0] m_axi_full_arcache,
		output wire [2 : 0] m_axi_full_arprot,
		output wire [3 : 0] m_axi_full_arqos,
		output wire [C_M_AXI_FULL_ARUSER_WIDTH-1 : 0] m_axi_full_aruser,
		output wire  m_axi_full_arvalid,
		input wire  m_axi_full_arready,
		input wire [C_M_AXI_FULL_ID_WIDTH-1 : 0] m_axi_full_rid,
		input wire [C_M_AXI_FULL_DATA_WIDTH-1 : 0] m_axi_full_rdata,
		input wire [1 : 0] m_axi_full_rresp,
		input wire  m_axi_full_rlast,
		input wire [C_M_AXI_FULL_RUSER_WIDTH-1 : 0] m_axi_full_ruser,
		input wire  m_axi_full_rvalid,
		output wire  m_axi_full_rready
	);
// Instantiation of Axi Bus Interface S00_AXI
	cut_and_forward_ip_slave_lite_v1_0_S00_AXI # ( 
		.C_S_AXI_DATA_WIDTH(C_S00_AXI_DATA_WIDTH),
		.C_S_AXI_ADDR_WIDTH(C_S00_AXI_ADDR_WIDTH)
	) cut_and_forward_ip_slave_lite_v1_0_S00_AXI_inst (
		.S_AXI_ACLK(s00_axi_aclk),
		.S_AXI_ARESETN(s00_axi_aresetn),
		.S_AXI_AWADDR(s00_axi_awaddr),
		.S_AXI_AWPROT(s00_axi_awprot),
		.S_AXI_AWVALID(s00_axi_awvalid),
		.S_AXI_AWREADY(s00_axi_awready),
		.S_AXI_WDATA(s00_axi_wdata),
		.S_AXI_WSTRB(s00_axi_wstrb),
		.S_AXI_WVALID(s00_axi_wvalid),
		.S_AXI_WREADY(s00_axi_wready),
		.S_AXI_BRESP(s00_axi_bresp),
		.S_AXI_BVALID(s00_axi_bvalid),
		.S_AXI_BREADY(s00_axi_bready),
		.S_AXI_ARADDR(s00_axi_araddr),
		.S_AXI_ARPROT(s00_axi_arprot),
		.S_AXI_ARVALID(s00_axi_arvalid),
		.S_AXI_ARREADY(s00_axi_arready),
		.S_AXI_RDATA(s00_axi_rdata),
		.S_AXI_RRESP(s00_axi_rresp),
		.S_AXI_RVALID(s00_axi_rvalid),
		.S_AXI_RREADY(s00_axi_rready)
	);

// Instantiation of Axi Bus Interface S_AXI_FULL
	cut_and_forward_ip_slave_full_v1_0_S_AXI_FULL # ( 
		.C_S_AXI_ID_WIDTH(C_S_AXI_FULL_ID_WIDTH),
		.C_S_AXI_DATA_WIDTH(C_S_AXI_FULL_DATA_WIDTH),
		.C_S_AXI_ADDR_WIDTH(C_S_AXI_FULL_ADDR_WIDTH),
		.C_S_AXI_AWUSER_WIDTH(C_S_AXI_FULL_AWUSER_WIDTH),
		.C_S_AXI_ARUSER_WIDTH(C_S_AXI_FULL_ARUSER_WIDTH),
		.C_S_AXI_WUSER_WIDTH(C_S_AXI_FULL_WUSER_WIDTH),
		.C_S_AXI_RUSER_WIDTH(C_S_AXI_FULL_RUSER_WIDTH),
		.C_S_AXI_BUSER_WIDTH(C_S_AXI_FULL_BUSER_WIDTH)
	) cut_and_forward_ip_slave_full_v1_0_S_AXI_FULL_inst (
		.S_AXI_ACLK(s_axi_full_aclk),
		.S_AXI_ARESETN(s_axi_full_aresetn),
		.S_AXI_AWID(s_axi_full_awid),
		.S_AXI_AWADDR(s_axi_full_awaddr),
		.S_AXI_AWLEN(s_axi_full_awlen),
		.S_AXI_AWSIZE(s_axi_full_awsize),
		.S_AXI_AWBURST(s_axi_full_awburst),
		.S_AXI_AWLOCK(s_axi_full_awlock),
		.S_AXI_AWCACHE(s_axi_full_awcache),
		.S_AXI_AWPROT(s_axi_full_awprot),
		.S_AXI_AWQOS(s_axi_full_awqos),
		.S_AXI_AWREGION(s_axi_full_awregion),
		.S_AXI_AWUSER(s_axi_full_awuser),
		.S_AXI_AWVALID(s_axi_full_awvalid),
		.S_AXI_AWREADY(s_axi_full_awready),
		.S_AXI_WDATA(s_axi_full_wdata),
		.S_AXI_WSTRB(s_axi_full_wstrb),
		.S_AXI_WLAST(s_axi_full_wlast),
		.S_AXI_WUSER(s_axi_full_wuser),
		.S_AXI_WVALID(s_axi_full_wvalid),
		.S_AXI_WREADY(s_axi_full_wready),
		.S_AXI_BID(s_axi_full_bid),
		.S_AXI_BRESP(s_axi_full_bresp),
		.S_AXI_BUSER(s_axi_full_buser),
		.S_AXI_BVALID(s_axi_full_bvalid),
		.S_AXI_BREADY(s_axi_full_bready),
		.S_AXI_ARID(s_axi_full_arid),
		.S_AXI_ARADDR(s_axi_full_araddr),
		.S_AXI_ARLEN(s_axi_full_arlen),
		.S_AXI_ARSIZE(s_axi_full_arsize),
		.S_AXI_ARBURST(s_axi_full_arburst),
		.S_AXI_ARLOCK(s_axi_full_arlock),
		.S_AXI_ARCACHE(s_axi_full_arcache),
		.S_AXI_ARPROT(s_axi_full_arprot),
		.S_AXI_ARQOS(s_axi_full_arqos),
		.S_AXI_ARREGION(s_axi_full_arregion),
		.S_AXI_ARUSER(s_axi_full_aruser),
		.S_AXI_ARVALID(s_axi_full_arvalid),
		.S_AXI_ARREADY(s_axi_full_arready),
		.S_AXI_RID(s_axi_full_rid),
		.S_AXI_RDATA(s_axi_full_rdata),
		.S_AXI_RRESP(s_axi_full_rresp),
		.S_AXI_RLAST(s_axi_full_rlast),
		.S_AXI_RUSER(s_axi_full_ruser),
		.S_AXI_RVALID(s_axi_full_rvalid),
		.S_AXI_RREADY(s_axi_full_rready)
	);

// Instantiation of Axi Bus Interface M_AXI_FULL
	cut_and_forward_ip_master_full_v1_0_M_AXI_FULL # ( 
		.C_M_TARGET_SLAVE_BASE_ADDR(C_M_AXI_FULL_TARGET_SLAVE_BASE_ADDR),
		.C_M_AXI_BURST_LEN(C_M_AXI_FULL_BURST_LEN),
		.C_M_AXI_ID_WIDTH(C_M_AXI_FULL_ID_WIDTH),
		.C_M_AXI_ADDR_WIDTH(C_M_AXI_FULL_ADDR_WIDTH),
		.C_M_AXI_DATA_WIDTH(C_M_AXI_FULL_DATA_WIDTH),
		.C_M_AXI_AWUSER_WIDTH(C_M_AXI_FULL_AWUSER_WIDTH),
		.C_M_AXI_ARUSER_WIDTH(C_M_AXI_FULL_ARUSER_WIDTH),
		.C_M_AXI_WUSER_WIDTH(C_M_AXI_FULL_WUSER_WIDTH),
		.C_M_AXI_RUSER_WIDTH(C_M_AXI_FULL_RUSER_WIDTH),
		.C_M_AXI_BUSER_WIDTH(C_M_AXI_FULL_BUSER_WIDTH)
	) cut_and_forward_ip_master_full_v1_0_M_AXI_FULL_inst (
		.INIT_AXI_TXN(m_axi_full_init_axi_txn),
		.TXN_DONE(m_axi_full_txn_done),
		.ERROR(m_axi_full_error),
		.M_AXI_ACLK(m_axi_full_aclk),
		.M_AXI_ARESETN(m_axi_full_aresetn),
		.M_AXI_AWID(m_axi_full_awid),
		.M_AXI_AWADDR(m_axi_full_awaddr),
		.M_AXI_AWLEN(m_axi_full_awlen),
		.M_AXI_AWSIZE(m_axi_full_awsize),
		.M_AXI_AWBURST(m_axi_full_awburst),
		.M_AXI_AWLOCK(m_axi_full_awlock),
		.M_AXI_AWCACHE(m_axi_full_awcache),
		.M_AXI_AWPROT(m_axi_full_awprot),
		.M_AXI_AWQOS(m_axi_full_awqos),
		.M_AXI_AWUSER(m_axi_full_awuser),
		.M_AXI_AWVALID(m_axi_full_awvalid),
		.M_AXI_AWREADY(m_axi_full_awready),
		.M_AXI_WDATA(m_axi_full_wdata),
		.M_AXI_WSTRB(m_axi_full_wstrb),
		.M_AXI_WLAST(m_axi_full_wlast),
		.M_AXI_WUSER(m_axi_full_wuser),
		.M_AXI_WVALID(m_axi_full_wvalid),
		.M_AXI_WREADY(m_axi_full_wready),
		.M_AXI_BID(m_axi_full_bid),
		.M_AXI_BRESP(m_axi_full_bresp),
		.M_AXI_BUSER(m_axi_full_buser),
		.M_AXI_BVALID(m_axi_full_bvalid),
		.M_AXI_BREADY(m_axi_full_bready),
		.M_AXI_ARID(m_axi_full_arid),
		.M_AXI_ARADDR(m_axi_full_araddr),
		.M_AXI_ARLEN(m_axi_full_arlen),
		.M_AXI_ARSIZE(m_axi_full_arsize),
		.M_AXI_ARBURST(m_axi_full_arburst),
		.M_AXI_ARLOCK(m_axi_full_arlock),
		.M_AXI_ARCACHE(m_axi_full_arcache),
		.M_AXI_ARPROT(m_axi_full_arprot),
		.M_AXI_ARQOS(m_axi_full_arqos),
		.M_AXI_ARUSER(m_axi_full_aruser),
		.M_AXI_ARVALID(m_axi_full_arvalid),
		.M_AXI_ARREADY(m_axi_full_arready),
		.M_AXI_RID(m_axi_full_rid),
		.M_AXI_RDATA(m_axi_full_rdata),
		.M_AXI_RRESP(m_axi_full_rresp),
		.M_AXI_RLAST(m_axi_full_rlast),
		.M_AXI_RUSER(m_axi_full_ruser),
		.M_AXI_RVALID(m_axi_full_rvalid),
		.M_AXI_RREADY(m_axi_full_rready)
	);

	// Add user logic here

	// User logic ends

	endmodule
